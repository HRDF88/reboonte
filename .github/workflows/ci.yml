name: Android CI with SonarCloud

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main

jobs:
  build:
    # Sets the OS runner for the job
    runs-on: ubuntu-latest
    env:
      CI: true

    permissions:
      # Permissions for repo contents, checks and PRs
      contents: read
      checks: write
      pull-requests: write

    steps:
      # Checkout the source code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Set up Java Development Kit 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # Create google-services.json from secret
      - name: Create google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json

      # Cache Gradle dependencies for faster builds
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle
            
      # Make gradlew executable
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Run unit tests
      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      # Upload unit test reports
      - name: Upload unit test reports
        if: always() # Always run, even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: app/build/reports/tests/testDebugUnitTest/

      # Enable KVM for emulator acceleration
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Debug the Android Virtual Device (AVD) directory contents
      - name: Debug AVD directory
        run: |
          mkdir -p ~/.android/avd
          ls -la ~/.android/avd || true

      # Remove existing AVD to avoid conflicts
      - name: Delete existing AVD if any
        run: |
          avd_path="$HOME/.android/avd/test.avd"
          if [ -d "$avd_path" ]; then
            echo "Deleting existing AVD at $avd_path"
            rm -rf "$avd_path"
          fi
          
      # Cache AVD files to speed up emulator setup    
      - name: Cache AVD
        uses: actions/cache@v3
        with:
          path: |
            ~/.android/avd
            ~/.android/adb*
          key: ${{ runner.os }}-avd-cache

      # Run instrumented tests on Android emulator
      - name: Run instrumented tests
        uses: ReactiveCircus/android-emulator-runner@v2.32.0
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          avd-name: test
          force-avd-creation: true
          emulator-boot-timeout: 300
          disable-animations: true
          enable-hw-keyboard: false
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          disable-spellchecker: false
          disable-linux-hw-accel: auto
          channel: stable
          script: |
            adb wait-for-device
            adb shell input keyevent 82
            sleep 10
            ./gradlew connectedDebugAndroidTest

      # Upload instrumented test reports even if tests fail
      - name: Upload instrumented test reports
        if: always() # Always run, even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-test-reports
          path: app/build/reports/androidTests/connected/debug/

      # Generate merged JaCoCo code coverage report
      - name: Generate merged JaCoCo report
        run: ./gradlew mergedJacocoReport

      # Upload JaCoCo code coverage report artifact
      - name: Upload JaCoCo report - Code coverage
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: app/build/reports/jacoco/mergedJacocoReport/mergedJacocoReport.xml
          
      # Run SonarCloud analysis with provided token
      - name: SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonar --info \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.organization=hrdf88 \
          -Dsonar.projectKey=HRDF88_reboonte \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/mergedJacocoReport/mergedJacocoReport.xml

      # Clean Gradle build artifacts at the end
      - name: Clean up Gradle
        if: always()
        run: ./gradlew clean
